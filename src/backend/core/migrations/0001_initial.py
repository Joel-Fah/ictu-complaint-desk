# Generated by Django 5.2 on 2025-05-24 12:14

import core.models
import core.utils
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_url', models.FileField(blank=True, help_text='URL of the file', null=True, upload_to='attachments/%Y/%m/%d/', verbose_name='File URL')),
                ('file_type', models.CharField(blank=True, help_text='Type of the file', max_length=255, null=True, verbose_name='File Type')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the file was uploaded', verbose_name='Uploaded At')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the category was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the category was updated', verbose_name='Updated At')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[(core.models.UserRole['STUDENT'], 'Student'), (core.models.UserRole['LECTURER'], 'Lecturer'), (core.models.UserRole['ADMIN_ASSISTANT'], 'Admin Assistant'), (core.models.UserRole['COMPLAINT_COORDINATOR'], 'Complaint Coordinator')], default=core.models.UserRole['STUDENT'], max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the complaint', max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(editable=False, max_length=255, unique=True, verbose_name='Category Slug')),
                ('description', models.TextField(help_text='Description of the complaint', verbose_name='Description')),
                ('type', models.CharField(choices=[('Private', 'Private'), ('Community', 'Community')], default='Private', help_text='The type of the complaint', max_length=255, verbose_name='Type')),
                ('isAnonymous', models.BooleanField(default=False, help_text='Whether the complaint is anonymous or not', verbose_name='Is Anonymous')),
                ('status', models.CharField(choices=[('Open', 'Open'), ('In Progress', 'In Progress'), ('Resolved', 'Resolved'), ('Closed', 'Closed'), ('Escalated', 'Escalated')], default='Open', help_text='The status of the complaint', max_length=255, verbose_name='Status')),
                ('deadline', models.DateTimeField(verbose_name='Deadline')),
                ('semester', models.CharField(choices=[('Fall', 'Fall'), ('Spring', 'Spring'), ('Summer', 'Summer')], default='Fall', help_text='Semester during which the complaint was submitted', max_length=255, verbose_name='Semester')),
                ('year', models.PositiveIntegerField(default=core.utils.get_current_year, help_text='The semester year that the complaint was submitted', verbose_name='Year')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the complaint was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the complaint was updated', verbose_name='Updated At')),
                ('category', models.ForeignKey(help_text='Category of the complaint', on_delete=django.db.models.deletion.CASCADE, related_name='category', to='core.category', verbose_name='Category')),
                ('student', models.ForeignKey(help_text='The student who submitted the complaint', limit_choices_to={'role': 'Student'}, on_delete=django.db.models.deletion.CASCADE, related_name='complaints', to=settings.AUTH_USER_MODEL, verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Complaint',
                'verbose_name_plural': 'Complaints',
            },
        ),
        migrations.CreateModel(
            name='ComplaintAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignedAt', models.DateTimeField(auto_now_add=True, help_text='The date and time when the complaint was assigned', verbose_name='Assigned At')),
                ('reminderCount', models.PositiveIntegerField(default=0, help_text='The number of reminders sent to the staff member', verbose_name='Reminder Count')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the assignment was updated', verbose_name='Updated At')),
                ('complaint', models.ForeignKey(help_text='The complaint being assigned', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='core.complaint', verbose_name='Complaint')),
                ('staff', models.ForeignKey(help_text='The staff member assigned to the complaint', limit_choices_to={'role__in': ['Lecturer', 'Admin Assistant', 'Complaint Coordinator']}, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_complaints', to=settings.AUTH_USER_MODEL, verbose_name='Staff')),
            ],
            options={
                'verbose_name': 'Complaint Assignment',
                'verbose_name_plural': 'Complaint Assignments',
            },
        ),
        migrations.CreateModel(
            name='Endorsement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the complaint was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the complaint was updated', verbose_name='Updated At')),
                ('complaint', models.ForeignKey(help_text='The complaint being assigned', on_delete=django.db.models.deletion.CASCADE, related_name='endorsements', to='core.complaint', verbose_name='Complaint')),
                ('student', models.ForeignKey(help_text='The student submitting the complaint', limit_choices_to={'role': 'Student'}, on_delete=django.db.models.deletion.CASCADE, related_name='endorsements', to=settings.AUTH_USER_MODEL, verbose_name='Student')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(verbose_name='Message')),
                ('is_read', models.BooleanField(default=False, help_text='Whether the notification has been read or not', verbose_name='Is Read')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the notification was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the notification was updated', verbose_name='Updated At')),
                ('recipient', models.ForeignKey(help_text='The recipient of the notification', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Recipient')),
            ],
        ),
        migrations.CreateModel(
            name='Reminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the reminder was sent', verbose_name='Sent At')),
                ('complaint', models.ForeignKey(help_text='The complaint for which the reminder is sent', on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='core.complaint', verbose_name='Complaint')),
                ('staff', models.ForeignKey(help_text='The staff member to whom the reminder is sent', limit_choices_to={'role__in': ['Lecturer', 'Admin Assistant', 'Complaint Coordinator']}, on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to=settings.AUTH_USER_MODEL, verbose_name='Staff')),
            ],
        ),
        migrations.CreateModel(
            name='Resolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', models.CharField(help_text='response to complaint', max_length=255, verbose_name='Response')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the resolution was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the resolution was updated', verbose_name='Updated At')),
                ('complaint', models.ForeignKey(help_text='The complaint being assigned', on_delete=django.db.models.deletion.CASCADE, related_name='resolutions', to='core.complaint', verbose_name='Complaint')),
                ('staff', models.ForeignKey(help_text='The staff member who resolved the complaint', limit_choices_to={'role__in': ['Lecturer', 'Admin Assistant', 'Complaint Coordinator']}, on_delete=django.db.models.deletion.CASCADE, related_name='resolutions', to=settings.AUTH_USER_MODEL, verbose_name='Staff')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_number', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('department', models.CharField(blank=True, max_length=10, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
